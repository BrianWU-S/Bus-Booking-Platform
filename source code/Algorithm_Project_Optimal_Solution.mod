/*********************************************
 * OPL 12.9.0.0 Model
 * Author: WSQ
 * Creation Date: 2020年6月4日 at 下午12:27:05
 *********************************************/
 
 // define unit route, a route is consisted of several unitroute
 tuple UnitRoute{
 int StartStation;   
 int EndStation;  
 float Distance;       
 }
 
int n=30;		// number of stations n
range N=1..n; 	

//each entry of PriceArray represents the ticket price to the station

float PriceArray[N]=[
8.015,
8.104,
8.357,
8.616,
9.769033,
8.001031,
8.197619,
8.029122,
8.116698,
8.477274,
8.112218,
8.950326,
9.760466,
15.962585,
8.030834,
8.665226,
14.082694,
8.185506,
8.669699,
9.052265,
8.025318,
8.565247,
8.028728,
14.257375,
9.664960,
8.527345,
8.003769,
8.020295,
8.034143,
8.078842
];


float OrderArray[N]=[
0,2,2,3,2,
6,1,2,1,1,
1,0,0,0,0,
0,2,0,0,0,
0,0,0,1,3,
0,0,0,2,3
];
 
{UnitRoute} DistanceArray={
<0,1,0.198957>,
<0,2,0.518953>,
<0,3,0.823807>,
<0,4,2.113641>,
<0,5,0.014820>,
<0,6,0.322906>,
<0,7,0.075208>,
<0,8,0.047462>,
<0,9,0.321597>,
<0,10,0.045322>,
<0,11,0.724939>,
<0,12,1.447334>,
<0,13,8.662339>,
<0,14,0.089363>,
<0,15,0.882519>,
<0,16,6.705554>,
<0,17,0.094455>,
<0,18,0.887339>,
<0,19,1.320179>,
<0,20,0.079966>,
<0,21,0.397639>,
<0,22,0.084169>,
<0,23,5.658602>,
<0,24,1.994382>,
<0,25,0.364594>,
<0,26,0.004335>,
<0,27,0.054756>,
<0,28,0.006113>,
<0,29,0.160812>,
<1,0,0.198957>,
<1,2,0.075575>,
<1,3,0.213191>,
<1,4,1.022243>,
<1,5,0.106153>,
<1,6,0.016852>,
<1,7,0.041449>,
<1,8,0.437877>,
<1,9,1.019426>,
<1,10,0.433541>,
<1,11,1.682871>,
<1,12,2.705770>,
<1,13,6.241726>,
<1,14,0.022107>,
<1,15,0.252258>,
<1,16,4.595362>,
<1,17,0.567501>,
<1,18,0.248298>,
<1,19,0.494628>,
<1,20,0.030138>,
<1,21,1.156515>,
<1,22,0.035937>,
<1,23,7.979503>,
<1,24,0.934611>,
<1,25,1.101748>,
<1,26,0.148139>,
<1,27,0.089381>,
<1,28,0.257122>,
<1,29,0.003014>,
<2,0,0.518953>,
<2,1,0.075575>,
<2,3,0.036619>,
<2,4,0.543036>,
<2,5,0.360774>,
<2,6,0.024418>,
<2,7,0.222307>,
<2,8,0.877163>,
<2,9,1.650099>,
<2,10,0.868996>,
<2,11,2.470573>,
<2,12,3.685201>,
<2,13,4.961612>,
<2,14,0.177785>,
<2,15,0.056776>,
<2,16,3.493641>,
<2,17,1.056199>,
<2,18,0.050385>,
<2,19,0.183703>,
<2,20,0.195208>,
<2,21,1.817705>,
<2,22,0.200225>,
<2,23,9.601639>,
<2,24,0.484094>,
<2,25,1.751204>,
<2,26,0.433238>,
<2,27,0.301936>,
<2,28,0.606747>,
<2,29,0.105211>,
<3,0,0.823807>,
<3,1,0.213191>,
<3,2,0.036619>,
<3,4,0.316825>,
<3,5,0.619143>,
<3,6,0.120816>,
<3,7,0.422855>,
<3,8,1.259609>,
<3,9,2.157385>,
<3,10,1.254752>,
<3,11,3.091851>,
<3,12,4.420591>,
<3,13,4.150193>,
<3,14,0.372110>,
<3,15,0.023571>,
<3,16,2.833642>,
<3,17,1.475666>,
<3,18,0.008437>,
<3,19,0.060720>,
<3,20,0.399098>,
<3,21,2.362557>,
<3,22,0.407792>,
<3,23,10.800488>,
<3,24,0.255374>,
<3,25,2.284179>,
<3,26,0.716650>,
<3,27,0.548808>,
<3,28,0.937476>,
<3,29,0.257840>,
<4,0,2.113641>,
<4,1,1.022243>,
<4,2,0.543036>,
<4,3,0.316825>,
<4,5,1.784231>,
<4,6,0.784427>,
<4,7,1.458986>,
<4,8,2.792930>,
<4,9,4.080580>,
<4,10,2.767518>,
<4,11,5.309550>,
<4,12,7.052901>,
<4,13,2.339636>,
<4,14,1.334555>,
<4,15,0.267310>,
<4,16,1.309550>,
<4,17,3.099132>,
<4,18,0.262937>,
<4,19,0.101064>,
<4,20,1.373126>,
<4,21,4.309160>,
<4,22,1.371035>,
<4,23,14.644980>,
<4,24,0.043576>,
<4,25,4.216149>,
<4,26,1.932493>,
<4,27,1.593218>,
<4,28,2.273297>,
<4,29,1.126285>,
<5,0,0.014820>,
<5,1,0.106153>,
<5,2,0.360774>,
<5,3,0.619143>,
<5,4,1.784231>,
<5,6,0.202744>,
<5,7,0.024328>,
<5,8,0.112846>,
<5,9,0.468278>,
<5,10,0.111909>,
<5,11,0.943954>,
<5,12,1.742456>,
<5,13,7.962145>,
<5,14,0.032756>,
<5,15,0.677493>,
<5,16,6.098212>,
<5,17,0.183162>,
<5,18,0.677794>,
<5,19,1.059065>,
<5,20,0.029023>,
<5,21,0.565884>,
<5,22,0.034934>,
<5,23,6.248270>,
<5,24,1.666822>,
<5,25,0.525798>,
<5,26,0.004975>,
<5,27,0.029832>,
<5,28,0.036708>,
<5,29,0.078170>,
<6,0,0.322906>,
<6,1,0.016852>,
<6,2,0.024418>,
<6,3,0.120816>,
<6,4,0.784427>,
<6,5,0.202744>,
<6,7,0.111119>,
<6,8,0.617053>,
<6,9,1.286949>,
<6,10,0.606682>,
<6,11,2.014388>,
<6,12,3.133837>,
<6,13,5.680310>,
<6,14,0.072661>,
<6,15,0.139587>,
<6,16,4.090549>,
<6,17,0.765969>,
<6,18,0.139763>,
<6,19,0.339300>,
<6,20,0.082502>,
<6,21,1.425156>,
<6,22,0.084864>,
<6,23,8.671770>,
<6,24,0.725627>,
<6,25,1.368073>,
<6,26,0.255007>,
<6,27,0.154846>,
<6,28,0.389939>,
<6,29,0.033882>,
<7,0,0.075208>,
<7,1,0.041449>,
<7,2,0.222307>,
<7,3,0.422855>,
<7,4,1.458986>,
<7,5,0.024328>,
<7,6,0.111119>,
<7,8,0.228309>,
<7,9,0.672626>,
<7,10,0.234211>,
<7,11,1.238383>,
<7,12,2.109682>,
<7,13,7.171804>,
<7,14,0.011867>,
<7,15,0.495786>,
<7,16,5.442723>,
<7,17,0.328678>,
<7,18,0.484339>,
<7,19,0.802268>,
<7,20,0.017598>,
<7,21,0.810601>,
<7,22,0.029357>,
<7,23,6.979594>,
<7,24,1.323416>,
<7,25,0.758802>,
<7,26,0.051117>,
<7,27,0.058271>,
<7,28,0.120569>,
<7,29,0.022341>,
<8,0,0.047462>,
<8,1,0.437877>,
<8,2,0.877163>,
<8,3,1.259609>,
<8,4,2.792930>,
<8,5,0.112846>,
<8,6,0.617053>,
<8,7,0.228309>,
<8,9,0.121971>,
<8,10,0.003044>,
<8,11,0.404720>,
<8,12,0.970649>,
<8,13,9.955302>,
<8,14,0.266236>,
<8,15,1.339149>,
<8,16,7.869580>,
<8,17,0.009470>,
<8,18,1.343268>,
<8,19,1.863267>,
<8,20,0.250638>,
<8,21,0.180247>,
<8,22,0.257004>,
<8,23,4.687199>,
<8,24,2.643053>,
<8,25,0.154977>,
<8,26,0.080028>,
<8,27,0.192091>,
<8,28,0.032426>,
<8,29,0.377701>,
<9,0,0.321597>,
<9,1,1.019426>,
<9,2,1.650099>,
<9,3,2.157385>,
<9,4,4.080580>,
<9,5,0.468278>,
<9,6,1.286949>,
<9,7,0.672626>,
<9,8,0.121971>,
<9,10,0.132971>,
<9,11,0.088714>,
<9,12,0.404471>,
<9,13,12.230593>,
<9,14,0.748043>,
<9,15,2.269355>,
<9,16,9.936027>,
<9,17,0.070994>,
<9,18,2.272787>,
<9,19,2.932962>,
<9,20,0.722293>,
<9,21,0.028716>,
<9,22,0.731870>,
<9,23,3.325213>,
<9,24,3.882910>,
<9,25,0.016169>,
<9,26,0.399342>,
<9,27,0.609569>,
<9,28,0.272258>,
<9,29,0.924074>,
<10,0,0.045322>,
<10,1,0.433541>,
<10,2,0.868996>,
<10,3,1.254752>,
<10,4,2.767518>,
<10,5,0.111909>,
<10,6,0.606682>,
<10,7,0.234211>,
<10,8,0.003044>,
<10,9,0.132971>,
<10,11,0.410447>,
<10,12,0.995523>,
<10,13,9.960666>,
<10,14,0.260681>,
<10,15,1.317435>,
<10,16,7.846586>,
<10,17,0.009680>,
<10,18,1.328758>,
<10,19,1.851527>,
<10,20,0.241963>,
<10,21,0.174494>,
<10,22,0.244023>,
<10,23,4.693656>,
<10,24,2.640493>,
<10,25,0.153046>,
<10,26,0.075089>,
<10,27,0.173137>,
<10,28,0.024837>,
<10,29,0.376872>,
<11,0,0.724939>,
<11,1,1.682871>,
<11,2,2.470573>,
<11,3,3.091851>,
<11,4,5.309550>,
<11,5,0.943954>,
<11,6,2.014388>,
<11,7,1.238383>,
<11,8,0.404720>,
<11,9,0.088714>,
<11,10,0.410447>,
<11,12,0.138638>,
<11,13,14.370507>,
<11,14,1.323250>,
<11,15,3.198169>,
<11,16,11.839827>,
<11,17,0.296097>,
<11,18,3.215348>,
<11,19,4.001633>,
<11,20,1.282557>,
<11,21,0.058656>,
<11,22,1.286327>,
<11,23,2.338073>,
<11,24,5.116246>,
<11,25,0.064660>,
<11,26,0.835981>,
<11,27,1.102766>,
<11,28,0.635242>,
<11,29,1.564236>,
<12,0,1.447334>,
<12,1,2.705770>,
<12,2,3.685201>,
<12,3,4.420591>,
<12,4,7.052901>,
<12,5,1.742456>,
<12,6,3.133837>,
<12,7,2.109682>,
<12,8,0.970649>,
<12,9,0.404471>,
<12,10,0.995523>,
<12,11,0.138638>,
<12,13,17.007972>,
<12,14,2.252292>,
<12,15,4.589955>,
<12,16,14.329420>,
<12,17,0.809094>,
<12,18,4.592889>,
<12,19,5.509088>,
<12,20,2.207693>,
<12,21,0.377501>,
<12,22,2.222677>,
<12,23,1.466958>,
<12,24,6.770440>,
<12,25,0.388565>,
<12,26,1.607209>,
<12,27,1.995050>,
<12,28,1.334841>,
<12,29,2.546612>,
<13,0,8.662339>,
<13,1,6.241726>,
<13,2,4.961612>,
<13,3,4.150193>,
<13,4,2.339636>,
<13,5,7.962145>,
<13,6,5.680310>,
<13,7,7.171804>,
<13,8,9.955302>,
<13,9,12.230593>,
<13,10,9.960666>,
<13,11,14.370507>,
<13,12,17.007972>,
<13,14,7.006191>,
<13,15,4.140120>,
<13,16,0.195500>,
<13,17,10.558164>,
<13,18,4.060921>,
<13,19,3.252184>,
<13,20,7.123153>,
<13,21,12.770299>,
<13,22,7.153456>,
<13,23,28.301491>,
<13,24,2.346605>,
<13,25,12.579998>,
<13,26,8.312607>,
<13,27,7.692754>,
<13,28,9.031860>,
<13,29,6.462684>,
<14,0,0.089363>,
<14,1,0.022107>,
<14,2,0.177785>,
<14,3,0.372110>,
<14,4,1.334555>,
<14,5,0.032756>,
<14,6,0.072661>,
<14,7,0.011867>,
<14,8,0.266236>,
<14,9,0.748043>,
<14,10,0.260681>,
<14,11,1.323250>,
<14,12,2.252292>,
<14,13,7.006191>,
<14,15,0.412312>,
<14,16,5.247450>,
<14,17,0.367457>,
<14,18,0.413582>,
<14,19,0.722860>,
<14,20,0.001233>,
<14,21,0.859452>,
<14,22,0.005121>,
<14,23,7.166592>,
<14,24,1.243720>,
<14,25,0.813137>,
<14,26,0.056000>,
<14,27,0.029081>,
<14,28,0.128462>,
<14,29,0.012549>,
<15,0,0.882519>,
<15,1,0.252258>,
<15,2,0.056776>,
<15,3,0.023571>,
<15,4,0.267310>,
<15,5,0.677493>,
<15,6,0.139587>,
<15,7,0.495786>,
<15,8,1.339149>,
<15,9,2.269355>,
<15,10,1.317435>,
<15,11,3.198169>,
<15,12,4.589955>,
<15,13,4.140120>,
<15,14,0.412312>,
<15,16,2.755997>,
<15,17,1.550215>,
<15,18,0.004426>,
<15,19,0.057975>,
<15,20,0.431296>,
<15,21,2.430431>,
<15,22,0.428175>,
<15,23,10.955369>,
<15,24,0.269934>,
<15,25,2.361847>,
<15,26,0.765761>,
<15,27,0.555556>,
<15,28,0.982942>,
<15,29,0.307979>,
<16,0,6.705554>,
<16,1,4.595362>,
<16,2,3.493641>,
<16,3,2.833642>,
<16,4,1.309550>,
<16,5,6.098212>,
<16,6,4.090549>,
<16,7,5.442723>,
<16,8,7.869580>,
<16,9,9.936027>,
<16,10,7.846586>,
<16,11,11.839827>,
<16,12,14.329420>,
<16,13,0.195500>,
<16,14,5.247450>,
<16,15,2.755997>,
<16,17,8.391697>,
<16,18,2.719544>,
<16,19,2.075114>,
<16,20,5.334900>,
<16,21,10.343528>,
<16,22,5.342605>,
<16,23,24.673907>,
<16,24,1.404085>,
<16,25,10.189682>,
<16,26,6.386499>,
<16,27,5.785439>,
<16,28,7.006074>,
<16,29,4.800444>,
<17,0,0.094455>,
<17,1,0.567501>,
<17,2,1.056199>,
<17,3,1.475666>,
<17,4,3.099132>,
<17,5,0.183162>,
<17,6,0.765969>,
<17,7,0.328678>,
<17,8,0.009470>,
<17,9,0.070994>,
<17,10,0.009680>,
<17,11,0.296097>,
<17,12,0.809094>,
<17,13,10.558164>,
<17,14,0.367457>,
<17,15,1.550215>,
<17,16,8.391697>,
<17,18,1.560085>,
<17,19,2.120872>,
<17,20,0.346498>,
<17,21,0.107338>,
<17,22,0.350197>,
<17,23,4.291866>,
<17,24,2.954966>,
<17,25,0.088714>,
<17,26,0.137123>,
<17,27,0.264596>,
<17,28,0.065505>,
<17,29,0.500554>,
<18,0,0.887339>,
<18,1,0.248298>,
<18,2,0.050385>,
<18,3,0.008437>,
<18,4,0.262937>,
<18,5,0.677794>,
<18,6,0.139763>,
<18,7,0.484339>,
<18,8,1.343268>,
<18,9,2.272787>,
<18,10,1.328758>,
<18,11,3.215348>,
<18,12,4.592889>,
<18,13,4.060921>,
<18,14,0.413582>,
<18,15,0.004426>,
<18,16,2.719544>,
<18,17,1.560085>,
<18,19,0.044899>,
<18,20,0.436789>,
<18,21,2.455609>,
<18,22,0.438853>,
<18,23,11.010731>,
<18,24,0.239189>,
<18,25,2.381840>,
<18,26,0.772342>,
<18,27,0.575738>,
<18,28,0.995759>,
<18,29,0.301013>,
<19,0,1.320179>,
<19,1,0.494628>,
<19,2,0.183703>,
<19,3,0.060720>,
<19,4,0.101064>,
<19,5,1.059065>,
<19,6,0.339300>,
<19,7,0.802268>,
<19,8,1.863267>,
<19,9,2.932962>,
<19,10,1.851527>,
<19,11,4.001633>,
<19,12,5.509088>,
<19,13,3.252184>,
<19,14,0.722860>,
<19,15,0.057975>,
<19,16,2.075114>,
<19,17,2.120872>,
<19,18,0.044899>,
<19,20,0.756248>,
<19,21,3.155086>,
<19,22,0.761758>,
<19,23,12.440114>,
<19,24,0.077958>,
<19,25,3.068670>,
<19,26,1.180892>,
<19,27,0.941501>,
<19,28,1.456584>,
<19,29,0.564584>,
<20,0,0.079966>,
<20,1,0.030138>,
<20,2,0.195208>,
<20,3,0.399098>,
<20,4,1.373126>,
<20,5,0.029023>,
<20,6,0.082502>,
<20,7,0.017598>,
<20,8,0.250638>,
<20,9,0.722293>,
<20,10,0.241963>,
<20,11,1.282557>,
<20,12,2.207693>,
<20,13,7.123153>,
<20,14,0.001233>,
<20,15,0.431296>,
<20,16,5.334900>,
<20,17,0.346498>,
<20,18,0.436789>,
<20,19,0.756248>,
<20,21,0.821983>,
<20,22,0.001535>,
<20,23,7.062606>,
<20,24,1.292909>,
<20,25,0.778705>,
<20,26,0.047698>,
<20,27,0.018462>,
<20,28,0.113748>,
<20,29,0.020513>,
<21,0,0.397639>,
<21,1,1.156515>,
<21,2,1.817705>,
<21,3,2.362557>,
<21,4,4.309160>,
<21,5,0.565884>,
<21,6,1.425156>,
<21,7,0.810601>,
<21,8,0.180247>,
<21,9,0.028716>,
<21,10,0.174494>,
<21,11,0.058656>,
<21,12,0.377501>,
<21,13,12.770299>,
<21,14,0.859452>,
<21,15,2.430431>,
<21,16,10.343528>,
<21,17,0.107338>,
<21,18,2.455609>,
<21,19,3.155086>,
<21,20,0.821983>,
<21,22,0.819180>,
<21,23,3.066944>,
<21,24,4.170422>,
<21,25,0.001871>,
<21,26,0.476828>,
<21,27,0.666081>,
<21,28,0.324178>,
<21,29,1.064073>,
<22,0,0.084169>,
<22,1,0.035937>,
<22,2,0.200225>,
<22,3,0.407792>,
<22,4,1.371035>,
<22,5,0.034934>,
<22,6,0.084864>,
<22,7,0.029357>,
<22,8,0.257004>,
<22,9,0.731870>,
<22,10,0.244023>,
<22,11,1.286327>,
<22,12,2.222677>,
<22,13,7.153456>,
<22,14,0.005121>,
<22,15,0.428175>,
<22,16,5.342605>,
<22,17,0.350197>,
<22,18,0.438853>,
<22,19,0.761758>,
<22,20,0.001535>,
<22,21,0.819180>,
<22,23,7.056087>,
<22,24,1.306794>,
<22,25,0.778789>,
<22,26,0.050351>,
<22,27,0.012029>,
<22,28,0.113669>,
<22,29,0.028476>,
<23,0,5.658602>,
<23,1,7.979503>,
<23,2,9.601639>,
<23,3,10.800488>,
<23,4,14.644980>,
<23,5,6.248270>,
<23,6,8.671770>,
<23,7,6.979594>,
<23,8,4.687199>,
<23,9,3.325213>,
<23,10,4.693656>,
<23,11,2.338073>,
<23,12,1.466958>,
<23,13,28.301491>,
<23,14,7.166592>,
<23,15,10.955369>,
<23,16,24.673907>,
<23,17,4.291866>,
<23,18,11.010731>,
<23,19,12.440114>,
<23,20,7.062606>,
<23,21,3.066944>,
<23,22,7.056087>,
<23,24,14.368704>,
<23,25,3.151762>,
<23,26,5.955769>,
<23,27,6.581528>,
<23,28,5.384198>,
<23,29,7.723554>,
<24,0,1.994382>,
<24,1,0.934611>,
<24,2,0.484094>,
<24,3,0.255374>,
<24,4,0.043576>,
<24,5,1.666822>,
<24,6,0.725627>,
<24,7,1.323416>,
<24,8,2.643053>,
<24,9,3.882910>,
<24,10,2.640493>,
<24,11,5.116246>,
<24,12,6.770440>,
<24,13,2.346605>,
<24,14,1.243720>,
<24,15,0.269934>,
<24,16,1.404085>,
<24,17,2.954966>,
<24,18,0.239189>,
<24,19,0.077958>,
<24,20,1.292909>,
<24,21,4.170422>,
<24,22,1.306794>,
<24,23,14.368704>,
<24,25,4.064426>,
<24,26,1.826930>,
<24,27,1.546391>,
<24,28,2.171314>,
<24,29,1.023141>,
<25,0,0.364594>,
<25,1,1.101748>,
<25,2,1.751204>,
<25,3,2.284179>,
<25,4,4.216149>,
<25,5,0.525798>,
<25,6,1.368073>,
<25,7,0.758802>,
<25,8,0.154977>,
<25,9,0.016169>,
<25,10,0.153046>,
<25,11,0.064660>,
<25,12,0.388565>,
<25,13,12.579998>,
<25,14,0.813137>,
<25,15,2.361847>,
<25,16,10.189682>,
<25,17,0.088714>,
<25,18,2.381840>,
<25,19,3.068670>,
<25,20,0.778705>,
<25,21,0.001871>,
<25,22,0.778789>,
<25,23,3.151762>,
<25,24,4.064426>,
<25,26,0.442391>,
<25,27,0.634384>,
<25,28,0.297697>,
<25,29,1.009425>,
<26,0,0.004335>,
<26,1,0.148139>,
<26,2,0.433238>,
<26,3,0.716650>,
<26,4,1.932493>,
<26,5,0.004975>,
<26,6,0.255007>,
<26,7,0.051117>,
<26,8,0.080028>,
<26,9,0.399342>,
<26,10,0.075089>,
<26,11,0.835981>,
<26,12,1.607209>,
<26,13,8.312607>,
<26,14,0.056000>,
<26,15,0.765761>,
<26,16,6.386499>,
<26,17,0.137123>,
<26,18,0.772342>,
<26,19,1.180892>,
<26,20,0.047698>,
<26,21,0.476828>,
<26,22,0.050351>,
<26,23,5.955769>,
<26,24,1.826930>,
<26,25,0.442391>,
<26,27,0.029781>,
<26,28,0.015306>,
<26,29,0.117045>,
<27,0,0.054756>,
<27,1,0.089381>,
<27,2,0.301936>,
<27,3,0.548808>,
<27,4,1.593218>,
<27,5,0.029832>,
<27,6,0.154846>,
<27,7,0.058271>,
<27,8,0.192091>,
<27,9,0.609569>,
<27,10,0.173137>,
<27,11,1.102766>,
<27,12,1.995050>,
<27,13,7.692754>,
<27,14,0.029081>,
<27,15,0.555556>,
<27,16,5.785439>,
<27,17,0.264596>,
<27,18,0.575738>,
<27,19,0.941501>,
<27,20,0.018462>,
<27,21,0.666081>,
<27,22,0.012029>,
<27,23,6.581528>,
<27,24,1.546391>,
<27,25,0.634384>,
<27,26,0.029781>,
<27,28,0.067346>,
<27,29,0.076820>,
<28,0,0.006113>,
<28,1,0.257122>,
<28,2,0.606747>,
<28,3,0.937476>,
<28,4,2.273297>,
<28,5,0.036708>,
<28,6,0.389939>,
<28,7,0.120569>,
<28,8,0.032426>,
<28,9,0.272258>,
<28,10,0.024837>,
<28,11,0.635242>,
<28,12,1.334841>,
<28,13,9.031860>,
<28,14,0.128462>,
<28,15,0.982942>,
<28,16,7.006074>,
<28,17,0.065505>,
<28,18,0.995759>,
<28,19,1.456584>,
<28,20,0.113748>,
<28,21,0.324178>,
<28,22,0.113669>,
<28,23,5.384198>,
<28,24,2.171314>,
<28,25,0.297697>,
<28,26,0.015306>,
<28,27,0.067346>,
<28,29,0.216690>,
<29,0,0.160812>,
<29,1,0.003014>,
<29,2,0.105211>,
<29,3,0.257840>,
<29,4,1.126285>,
<29,5,0.078170>,
<29,6,0.033882>,
<29,7,0.022341>,
<29,8,0.377701>,
<29,9,0.924074>,
<29,10,0.376872>,
<29,11,1.564236>,
<29,12,2.546612>,
<29,13,6.462684>,
<29,14,0.012549>,
<29,15,0.307979>,
<29,16,4.800444>,
<29,17,0.500554>,
<29,18,0.301013>,
<29,19,0.564584>,
<29,20,0.020513>,
<29,21,1.064073>,
<29,22,0.028476>,
<29,23,7.723554>,
<29,24,1.023141>,
<29,25,1.009425>,
<29,26,0.117045>,
<29,27,0.076820>,
<29,28,0.216690>
};
  
  // set parameters here
  float c_r=5.2;		//maintainence cost for each bus per route
  float c_b=2;			// fuel price per bus per km
  int VNumber=2;		//vehicle number
  range VN=1..VNumber;
  // capacity limitation
  float  CapacityLimit[VN]=[12,12];   
  //decision variables
  //UnitRoute flag array, URF[i][j]==1 means Unit Route i is visited by bus j
  dvar boolean URF[DistanceArray][VN];		
  // Station Visit Flag array, SVF[i][j]==1 means station i is visited by bus j
  dvar boolean SVF[N][VN];	
  //Determine how much vehicle are used, UsageFlag[j]==1 means vehicle j is used 	
  dvar boolean UsageFlag[VN];	
  // Station Fetch Number, if SFN[i][j] = k, it means station i is visited by bus j which fetch k passengers.
  dvar int SFN[N][VN];
  // 
  dvar float v[N];
  //
  dexpr float TotalIncome=sum(i in N, j in VN) PriceArray[i]*SFN[i][j];
  //
  dexpr float TotalMaintenenceCost=sum(route_unit in DistanceArray, current_vehicle in VN) URF[route_unit][current_vehicle]*route_unit.Distance*c_r;
  //
  dexpr float TotalFuleFee=sum(k in VN) UsageFlag[k]*c_b;

//define decision formula
  maximize TotalIncome-TotalMaintenenceCost-TotalFuleFee;
  
//define constrains
subject to
{   
  Unique_Department_Limitation:
  (sum(i in VN) SVF[1][i]) == (sum(j in VN) UsageFlag[j]);

  forall(i in N, j in VN) {
    IntPassengerNum_Limitation:
      SFN[i][j]>=0;
  }

  forall (i in VN) {
   BusCapacityLimit:
   	 sum (j in N) SFN[j][i] <= CapacityLimit[i]; 
  }  
  
  forall (i in N){
  	OrderLimitation:
  	// number of order for the station must >= total fetch passenger number to this station   
      (sum (j in VN) SFN[i][j]) <= OrderArray[i];  
  }
  
  forall(i in DistanceArray, j in VN)   
  	BusUsageConflictLimit_A:
      // A bus can only be put into usage or not, if it's not be used,  URF[i][j] in UnitRoute flag array should always be zero
  	  (UsageFlag[j]==1 || (UsageFlag[j]==0 && URF[i][j]==0))==1; 

  forall(i in N, j in VN)  
   	BusUsageConflictLimit_B:
   	  // A bus can only be put into usage or not, if it's not be used,  SVF[i][j] in Station Visit Flag array should always be zero
      (UsageFlag[j]==1 || (UsageFlag[j]==0 && SVF[i][j]==0))==1;
 
  
  /* WRONG LIMITATION, which makes the solution results not correct
  * URF[k][j]==1 we can get that SFN[i][j] must ==1, and SFN[i][j]==0 we can get that URF[k][j] must ==0
  * But we can not get the things inverse.
  forall (i in N, j in VN) {          
  		forall(k in DistanceArray){ 		  		
  		  if(k.StartStation==i){
  		    UnitRoute_Contain_Station_Limit_A:
  		  	  SFN[i][j]==URF[k][j];
    	  }
    	  if(k.EndStation==i){
    	  	UnitRoute_Contain_Station_Limit_B:
    	  	  SFN[i][j]==URF[k][j];    	  
    	  }  		    		
  		}
  	}  
  */
  
  forall (i in N, j in VN) {
    UnitRoute_Contain_Station_Limit_A:  
    (((sum(k in DistanceArray: k.StartStation==i) URF[k][j])>=1 && SFN[i][j]==1)|| ((sum(k in DistanceArray: k.StartStation==i) URF[k][j])==0 && SFN[i][j]==0) )==1;
  }
  
  forall (i in N, j in VN) {
    UnitRoute_Contain_Station_Limit_B:   
    (((sum(k in DistanceArray: k.EndStation==i) URF[k][j])>=1 && SFN[i][j]==1)|| ((sum(k in DistanceArray: k.EndStation==i) URF[k][j])==0 && SFN[i][j]==0) )==1;
  }
 
  forall (i in DistanceArray: i.StartStation >1 && i.EndStation >1, j in VN){   
  	SubRoute_Limitation:
  	v[i.StartStation] +1 <= v[i.EndStation] + 1000*(1-URF[i][j]);
  }
  
  
  forall (i in N, j in VN){
  	Fetch_Limitation:
  	  (SVF[i][j]==1 || (SVF[i][j]==0&& SFN[i][j]==0))==1; 
  	    
  } 
  
}   

/* set CPLEX PARAM and brief explanation
 1. set acceptable gap
 the acceptable gap is larger, the MIP will terminate sooner,
 this can reduce the time for solving, we don't need too high
 precision here
 2. Set the VARSEL value to 3
 Strong branching (3) causes variable selection based on partially solving a number of subproblems 
 with tentative branches to see which branch is the most promising.
 This strategy is very effective on large, difficult MIP problems. 
 The default value (0 zero) allows CPLEX to select the best rule 
 based on the problem and its progress. But it takes too long times to solve this large problem
*/
execute {
cplex.epgap= 0.2;
cplex.varsel=3;
}